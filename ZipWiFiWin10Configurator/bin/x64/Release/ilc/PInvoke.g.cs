#define MCG_WINRT_SUPPORTED
using Mcg.System;
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.WindowsRuntime;


// -----------------------------------------------------------------------------------------------------------
// 
// WARNING: THIS SOURCE FILE IS FOR 64-BIT BUILDS ONLY!
// 
// MCG GENERATED CODE
// 
// This C# source file is generated by MCG and is added into the application at compile time to support interop features.
// 
// It has three primary components:
// 
// 1. Public type definitions with interop implementation used by this application including WinRT & COM data structures and P/Invokes.
// 
// 2. The 'McgInterop' class containing marshaling code that acts as a bridge from managed code to native code.
// 
// 3. The 'McgNative' class containing marshaling code and native type definitions that call into native code and are called by native code.
// 
// -----------------------------------------------------------------------------------------------------------
// 
// warning CS0067: The event 'event' is never used
#pragma warning disable 67
// warning CS0169: The field 'field' is never used
#pragma warning disable 169
// warning CS0649: Field 'field' is never assigned to, and will always have its default value 0
#pragma warning disable 414
// warning CS0414: The private field 'field' is assigned but its value is never used
#pragma warning disable 649
// warning CS1591: Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// warning CS0108 'member1' hides inherited member 'member2'. Use the new keyword if hiding was intended.
#pragma warning disable 108
// warning CS0114 'member1' hides inherited member 'member2'.  To make the current method override that implementation, add the override keyword. Otherwise add the new keyword.
#pragma warning disable 114
// warning CS0659 'type' overrides Object.Equals but does not override GetHashCode.
#pragma warning disable 659
// warning CS0465 Introducing a 'Finalize' method can interfere with destructor invocation. Did you intend to declare a destructor?
#pragma warning disable 465
// warning CS0028 'function declaration' has the wrong signature to be an entry point
#pragma warning disable 28
// warning CS0162 Unreachable code Detected
#pragma warning disable 162
// warning CS0628 new protected member declared in sealed class
#pragma warning disable 628

namespace McgInterop
{
	/// <summary>
	/// P/Invoke class for module '[MRT]'
	/// </summary>
	public unsafe static partial class _MRT_
	{
		// Signature, RhWaitForPendingFinalizers, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhWaitForPendingFinalizers")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static void RhWaitForPendingFinalizers(int allowReentrantWait)
		{
			// Marshalling
			// Call to native method
			global::McgInterop._MRT__PInvokes.RhWaitForPendingFinalizers(allowReentrantWait);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, RhCompatibleReentrantWaitAny, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr___ptr__w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "RhCompatibleReentrantWaitAny")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static int RhCompatibleReentrantWaitAny(
					int alertable, 
					int timeout, 
					int count, 
					global::System.IntPtr* handles)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop._MRT__PInvokes.RhCompatibleReentrantWaitAny(
								alertable, 
								timeout, 
								count, 
								((global::System.IntPtr*)handles)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, _ecvt_s, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] double__double, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int___ptrint *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int___ptrint *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "_ecvt_s")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static void _ecvt_s(
					byte* buffer, 
					int sizeInBytes, 
					double value, 
					int count, 
					int* dec, 
					int* sign)
		{
			// Marshalling
			// Call to native method
			global::McgInterop._MRT__PInvokes._ecvt_s(
								((byte*)buffer), 
								sizeInBytes, 
								value, 
								count, 
								((int*)dec), 
								((int*)sign)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}

		// Signature, memmove, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] ulong__unsigned __int64, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Runtime.RuntimeImports", "memmove")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static void memmove(
					byte* dmem, 
					byte* smem, 
					ulong size)
		{
			// Marshalling
			// Call to native method
			global::McgInterop._MRT__PInvokes.memmove(
								((byte*)dmem), 
								((byte*)smem), 
								size
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module '*'
	/// </summary>
	public unsafe static partial class _
	{
		// Signature, CallingConventionConverter_GetStubs, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.TypeLoader, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.Runtime.TypeLoader.CallConverterThunk", "CallingConventionConverter_GetStubs")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static void CallingConventionConverter_GetStubs(
					out global::System.IntPtr returnVoidStub, 
					out global::System.IntPtr returnIntegerStub, 
					out global::System.IntPtr commonStub)
		{
			// Setup
			global::System.IntPtr unsafe_returnVoidStub;
			global::System.IntPtr unsafe_returnIntegerStub;
			global::System.IntPtr unsafe_commonStub;
			// Marshalling
			// Call to native method
			global::McgInterop.__PInvokes.CallingConventionConverter_GetStubs(
								&(unsafe_returnVoidStub), 
								&(unsafe_returnIntegerStub), 
								&(unsafe_commonStub)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			commonStub = unsafe_commonStub;
			returnIntegerStub = unsafe_returnIntegerStub;
			returnVoidStub = unsafe_returnVoidStub;
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-errorhandling-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_errorhandling_l1_1_0_dll
	{
		// Signature, GetLastError, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Runtime.Extensions, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetLastError")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static int GetLastError()
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes.GetLastError();
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_l1_1_0_dll
	{
		// Signature, RoInitialize, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "RoInitialize")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static int RoInitialize(uint initType)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_winrt_l1_1_0_dll_PInvokes.RoInitialize(initType);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'ws2_32.dll'
	/// </summary>
	public unsafe static partial class ws2_32_dll
	{
		// Signature, getpeername, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketError__System_Private_Networking__SocketError__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Net_Sockets_SafeCloseSocket__System_Private_Networking____w64 int, [fwd] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "getpeername")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SocketError__System_Private_Networking getpeername(
					global::System.Net.Sockets.SafeCloseSocket__System_Private_Networking socketHandle, 
					byte[] socketAddress, 
					ref int socketAddressSize)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_socketAddress;
			int unsafe_socketAddressSize;
			global::System.Net.Sockets.SocketError__System_Private_Networking unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_socketAddress = global::McgInterop.McgCoreHelpers.GetArrayForCompat(socketAddress))
			{
				unsafe_socketAddress = (byte*)pinned_socketAddress;
				unsafe_socketAddressSize = socketAddressSize;
				// Call to native method
				unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.getpeername(
									socketHandle.DangerousGetHandle(), 
									unsafe_socketAddress, 
									&(unsafe_socketAddressSize)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				socketAddressSize = unsafe_socketAddressSize;
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, WSASend, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketError__System_Private_Networking__SocketError__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Net_Sockets_SafeCloseSocket__System_Private_Networking____w64 int, [fwd] [in] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] System_Net_Sockets_WSABuffer__System_Private_Networking__System_Net_Sockets__WSABuffer__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketFlags__System_Private_Networking__SocketFlags__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "WSASend")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SocketError__System_Private_Networking WSASend(
					global::System.Net.Sockets.SafeCloseSocket__System_Private_Networking socketHandle, 
					ref global::System.Net.Sockets.WSABuffer__System_Private_Networking buffer, 
					int bufferCount, 
					out int bytesTransferred, 
					global::System.Net.Sockets.SocketFlags__System_Private_Networking socketFlags, 
					global::System.Runtime.InteropServices.SafeHandle overlapped, 
					global::System.IntPtr completionRoutine)
		{
			// Setup
			bool addRefed = false;
			global::System.Net.Sockets.WSABuffer__System_Private_Networking unsafe_buffer;
			int unsafe_bytesTransferred;
			bool addRefed_1 = false;
			global::System.Net.Sockets.SocketError__System_Private_Networking unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			unsafe_buffer = buffer;
			overlapped.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.WSASend(
								socketHandle.DangerousGetHandle(), 
								&(unsafe_buffer), 
								bufferCount, 
								&(unsafe_bytesTransferred), 
								socketFlags, 
								overlapped.DangerousGetHandle(), 
								completionRoutine
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed_1)
				overlapped.DangerousRelease();
			bytesTransferred = unsafe_bytesTransferred;
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, WSASend__0, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketError__System_Private_Networking__SocketError__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Net_Sockets_SafeCloseSocket__System_Private_Networking____w64 int, [fwd] [in] [Mcg.CodeGen.ArrayMarshaller] rg_System_Net_Sockets_WSABuffer__System_Private_Networking__System_Net_Sockets__WSABuffer__System_Private_Networking *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketFlags__System_Private_Networking__SocketFlags__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "WSASend")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SocketError__System_Private_Networking WSASend__0(
					global::System.Net.Sockets.SafeCloseSocket__System_Private_Networking socketHandle, 
					global::System.Net.Sockets.WSABuffer__System_Private_Networking[] buffersArray, 
					int bufferCount, 
					out int bytesTransferred, 
					global::System.Net.Sockets.SocketFlags__System_Private_Networking socketFlags, 
					global::System.Runtime.InteropServices.SafeHandle overlapped, 
					global::System.IntPtr completionRoutine)
		{
			// Setup
			bool addRefed = false;
			global::System.Net.Sockets.WSABuffer__System_Private_Networking* unsafe_buffersArray = default(global::System.Net.Sockets.WSABuffer__System_Private_Networking*);
			int unsafe_bytesTransferred;
			bool addRefed_1 = false;
			global::System.Net.Sockets.SocketError__System_Private_Networking unsafe___value;
			try
			{
				// Marshalling
				socketHandle.DangerousAddRef(ref addRefed);
				if (buffersArray == null)
					unsafe_buffersArray = null;
				else
				{
					if (buffersArray != null)
						unsafe_buffersArray = (global::System.Net.Sockets.WSABuffer__System_Private_Networking*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(buffersArray.Length * sizeof(global::System.Net.Sockets.WSABuffer__System_Private_Networking))));
					if (buffersArray != null)
						for (uint mcgIdx = 0; (mcgIdx < buffersArray.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] System_Net_Sockets_WSABuffer__System_Private_Networking__System_Net_Sockets__WSABuffer__System_Private_Networking buffersArray
							unsafe_buffersArray[mcgIdx] = buffersArray[mcgIdx];
						}
				}
				overlapped.DangerousAddRef(ref addRefed_1);
				// Call to native method
				unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.WSASend__0(
									socketHandle.DangerousGetHandle(), 
									unsafe_buffersArray, 
									bufferCount, 
									&(unsafe_bytesTransferred), 
									socketFlags, 
									overlapped.DangerousGetHandle(), 
									completionRoutine
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (addRefed_1)
					overlapped.DangerousRelease();
				bytesTransferred = unsafe_bytesTransferred;
				if (addRefed)
					socketHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_buffersArray);
			}
		}

		// Signature, WSARecv, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketError__System_Private_Networking__SocketError__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Net_Sockets_SafeCloseSocket__System_Private_Networking____w64 int, [fwd] [in] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] System_Net_Sockets_WSABuffer__System_Private_Networking__System_Net_Sockets__WSABuffer__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketFlags__System_Private_Networking__SocketFlags__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "WSARecv")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SocketError__System_Private_Networking WSARecv(
					global::System.Net.Sockets.SafeCloseSocket__System_Private_Networking socketHandle, 
					ref global::System.Net.Sockets.WSABuffer__System_Private_Networking buffer, 
					int bufferCount, 
					out int bytesTransferred, 
					ref global::System.Net.Sockets.SocketFlags__System_Private_Networking socketFlags, 
					global::System.Runtime.InteropServices.SafeHandle overlapped, 
					global::System.IntPtr completionRoutine)
		{
			// Setup
			bool addRefed = false;
			global::System.Net.Sockets.WSABuffer__System_Private_Networking unsafe_buffer;
			int unsafe_bytesTransferred;
			global::System.Net.Sockets.SocketFlags__System_Private_Networking unsafe_socketFlags;
			bool addRefed_1 = false;
			global::System.Net.Sockets.SocketError__System_Private_Networking unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			unsafe_buffer = buffer;
			unsafe_socketFlags = socketFlags;
			overlapped.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.WSARecv(
								socketHandle.DangerousGetHandle(), 
								&(unsafe_buffer), 
								bufferCount, 
								&(unsafe_bytesTransferred), 
								&(unsafe_socketFlags), 
								overlapped.DangerousGetHandle(), 
								completionRoutine
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed_1)
				overlapped.DangerousRelease();
			socketFlags = unsafe_socketFlags;
			bytesTransferred = unsafe_bytesTransferred;
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, WSARecv__0, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketError__System_Private_Networking__SocketError__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Net_Sockets_SafeCloseSocket__System_Private_Networking____w64 int, [fwd] [in] [out] [Mcg.CodeGen.ArrayMarshaller] rg_System_Net_Sockets_WSABuffer__System_Private_Networking__System_Net_Sockets__WSABuffer__System_Private_Networking *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketFlags__System_Private_Networking__SocketFlags__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "WSARecv")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SocketError__System_Private_Networking WSARecv__0(
					global::System.Net.Sockets.SafeCloseSocket__System_Private_Networking socketHandle, 
					global::System.Net.Sockets.WSABuffer__System_Private_Networking[] buffers, 
					int bufferCount, 
					out int bytesTransferred, 
					ref global::System.Net.Sockets.SocketFlags__System_Private_Networking socketFlags, 
					global::System.Runtime.InteropServices.SafeHandle overlapped, 
					global::System.IntPtr completionRoutine)
		{
			// Setup
			bool addRefed = false;
			global::System.Net.Sockets.WSABuffer__System_Private_Networking* unsafe_buffers = default(global::System.Net.Sockets.WSABuffer__System_Private_Networking*);
			int unsafe_bytesTransferred;
			global::System.Net.Sockets.SocketFlags__System_Private_Networking unsafe_socketFlags;
			bool addRefed_1 = false;
			global::System.Net.Sockets.SocketError__System_Private_Networking unsafe___value;
			try
			{
				// Marshalling
				socketHandle.DangerousAddRef(ref addRefed);
				if (buffers == null)
					unsafe_buffers = null;
				else
				{
					if (buffers != null)
						unsafe_buffers = (global::System.Net.Sockets.WSABuffer__System_Private_Networking*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(((global::System.IntPtr)checked(buffers.Length * sizeof(global::System.Net.Sockets.WSABuffer__System_Private_Networking))));
					if (buffers != null)
						for (uint mcgIdx = 0; (mcgIdx < buffers.Length); mcgIdx++)
						{
							// [fwd] [in] [optional] [Mcg.CodeGen.BlittableStructMarshaller] System_Net_Sockets_WSABuffer__System_Private_Networking__System_Net_Sockets__WSABuffer__System_Private_Networking buffers
							unsafe_buffers[mcgIdx] = buffers[mcgIdx];
						}
				}
				unsafe_socketFlags = socketFlags;
				overlapped.DangerousAddRef(ref addRefed_1);
				// Call to native method
				unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.WSARecv__0(
									socketHandle.DangerousGetHandle(), 
									unsafe_buffers, 
									bufferCount, 
									&(unsafe_bytesTransferred), 
									&(unsafe_socketFlags), 
									overlapped.DangerousGetHandle(), 
									completionRoutine
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				if (addRefed_1)
					overlapped.DangerousRelease();
				socketFlags = unsafe_socketFlags;
				bytesTransferred = unsafe_bytesTransferred;
				if (buffers != null)
					for (uint mcgIdx_1 = 0; (mcgIdx_1 < buffers.Length); mcgIdx_1++)
					{
						// [fwd] [optional] [Mcg.CodeGen.BlittableStructMarshaller] System_Net_Sockets_WSABuffer__System_Private_Networking__System_Net_Sockets__WSABuffer__System_Private_Networking buffers
						buffers[mcgIdx_1] = unsafe_buffers[mcgIdx_1];
					}
				if (addRefed)
					socketHandle.DangerousRelease();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_buffers);
			}
		}

		// Signature, WSAStartup, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketError__System_Private_Networking__SocketError__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] short__short, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.StructMarshaller] System_Net_Sockets_WSAData__System_Private_Networking__System_Net_Sockets__WSAData__System_Private_Networking, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "WSAStartup")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SocketError__System_Private_Networking WSAStartup(
					short wVersionRequested, 
					out global::System.Net.Sockets.WSAData__System_Private_Networking lpWSAData)
		{
			// Setup
			global::System.Net.Sockets.WSAData__System_Private_Networking__Impl.UnsafeType unsafe_lpWSAData = default(global::System.Net.Sockets.WSAData__System_Private_Networking__Impl.UnsafeType);
			global::System.Net.Sockets.SocketError__System_Private_Networking unsafe___value;
			// Marshalling
			unsafe_lpWSAData = default(global::System.Net.Sockets.WSAData__System_Private_Networking__Impl.UnsafeType);
			// Call to native method
			unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.WSAStartup(
								wVersionRequested, 
								&(unsafe_lpWSAData)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Net.Sockets.WSAData__System_Private_Networking__Impl.Marshal__UnsafeToSafe(
								ref unsafe_lpWSAData, 
								out lpWSAData
							);
			// Return
			return unsafe___value;
		}

		// Signature, WSASocketW, [fwd] [return] [Mcg.CodeGen.Win32HandleMarshaller] System_Net_Sockets_SafeCloseSocket_InnerSafeCloseSocket__System_Private_Networking____w64 int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_AddressFamily__System_Private_Networking__AddressFamily__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketType__System_Private_Networking__SocketType__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_ProtocolType__System_Private_Networking__ProtocolType__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketConstructorFlags__System_Private_Networking__SocketConstructorFlags__System_Private_Networking, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "WSASocketW")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Private_Networking WSASocketW(
					global::System.Net.Sockets.AddressFamily__System_Private_Networking addressFamily, 
					global::System.Net.Sockets.SocketType__System_Private_Networking socketType, 
					global::System.Net.Sockets.ProtocolType__System_Private_Networking protocolType, 
					global::System.IntPtr protocolInfo, 
					uint group, 
					global::System.Net.Sockets.SocketConstructorFlags__System_Private_Networking flags)
		{
			// Setup
			global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Private_Networking __value;
			global::System.IntPtr unsafe___value;
			// Marshalling
			__value = new global::System.Net.Sockets.SafeCloseSocket_InnerSafeCloseSocket__System_Private_Networking();
			// Call to native method
			unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.WSASocketW(
								addressFamily, 
								socketType, 
								protocolType, 
								protocolInfo, 
								group, 
								flags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
								__value, 
								unsafe___value
							);
			// Return
			return __value;
		}

		// Signature, select, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] System_Net_Sockets_TimeValue__System_Private_Networking__System_Net_Sockets__TimeValue__System_Private_Networking, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "select")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static int select(
					int ignoredParameter, 
					global::System.IntPtr[] readfds, 
					global::System.IntPtr[] writefds, 
					global::System.IntPtr[] exceptfds, 
					ref global::System.Net.Sockets.TimeValue__System_Private_Networking timeout)
		{
			// Setup
			global::System.IntPtr* unsafe_readfds;
			global::System.IntPtr* unsafe_writefds;
			global::System.IntPtr* unsafe_exceptfds;
			global::System.Net.Sockets.TimeValue__System_Private_Networking unsafe_timeout;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_readfds = global::McgInterop.McgCoreHelpers.GetArrayForCompat(readfds))
			{
				unsafe_readfds = (global::System.IntPtr*)pinned_readfds;
				fixed (global::System.IntPtr* pinned_writefds = global::McgInterop.McgCoreHelpers.GetArrayForCompat(writefds))
				{
					unsafe_writefds = (global::System.IntPtr*)pinned_writefds;
					fixed (global::System.IntPtr* pinned_exceptfds = global::McgInterop.McgCoreHelpers.GetArrayForCompat(exceptfds))
					{
						unsafe_exceptfds = (global::System.IntPtr*)pinned_exceptfds;
						unsafe_timeout = timeout;
						// Call to native method
						unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.select(
											ignoredParameter, 
											unsafe_readfds, 
											unsafe_writefds, 
											unsafe_exceptfds, 
											&(unsafe_timeout)
										);
						global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, select__0, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "select")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static int select__0(
					int ignoredParameter, 
					global::System.IntPtr[] readfds, 
					global::System.IntPtr[] writefds, 
					global::System.IntPtr[] exceptfds, 
					global::System.IntPtr nullTimeout)
		{
			// Setup
			global::System.IntPtr* unsafe_readfds;
			global::System.IntPtr* unsafe_writefds;
			global::System.IntPtr* unsafe_exceptfds;
			int unsafe___value;
			// Marshalling
			fixed (global::System.IntPtr* pinned_readfds = global::McgInterop.McgCoreHelpers.GetArrayForCompat(readfds))
			{
				unsafe_readfds = (global::System.IntPtr*)pinned_readfds;
				fixed (global::System.IntPtr* pinned_writefds = global::McgInterop.McgCoreHelpers.GetArrayForCompat(writefds))
				{
					unsafe_writefds = (global::System.IntPtr*)pinned_writefds;
					fixed (global::System.IntPtr* pinned_exceptfds = global::McgInterop.McgCoreHelpers.GetArrayForCompat(exceptfds))
					{
						unsafe_exceptfds = (global::System.IntPtr*)pinned_exceptfds;
						// Call to native method
						unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.select__0(
											ignoredParameter, 
											unsafe_readfds, 
											unsafe_writefds, 
											unsafe_exceptfds, 
											nullTimeout
										);
						global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
						global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					}
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, ioctlsocket, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketError__System_Private_Networking__SocketError__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Net_Sockets_SafeCloseSocket__System_Private_Networking____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "ioctlsocket")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SocketError__System_Private_Networking ioctlsocket(
					global::System.Net.Sockets.SafeCloseSocket__System_Private_Networking socketHandle, 
					int cmd, 
					ref int argp)
		{
			// Setup
			bool addRefed = false;
			int unsafe_argp;
			global::System.Net.Sockets.SocketError__System_Private_Networking unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			unsafe_argp = argp;
			// Call to native method
			unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.ioctlsocket(
								socketHandle.DangerousGetHandle(), 
								cmd, 
								&(unsafe_argp)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			argp = unsafe_argp;
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, shutdown, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketError__System_Private_Networking__SocketError__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Net_Sockets_SafeCloseSocket__System_Private_Networking____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "shutdown")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SocketError__System_Private_Networking shutdown(
					global::System.Net.Sockets.SafeCloseSocket__System_Private_Networking socketHandle, 
					int how)
		{
			// Setup
			bool addRefed = false;
			global::System.Net.Sockets.SocketError__System_Private_Networking unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			// Call to native method
			unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.shutdown(
								socketHandle.DangerousGetHandle(), 
								how
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, setsockopt, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketError__System_Private_Networking__SocketError__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Net_Sockets_SafeCloseSocket__System_Private_Networking____w64 int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketOptionLevel__System_Private_Networking__SocketOptionLevel__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketOptionName__System_Private_Networking__SocketOptionName__System_Private_Networking, [fwd] [in] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "setsockopt")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SocketError__System_Private_Networking setsockopt(
					global::System.Net.Sockets.SafeCloseSocket__System_Private_Networking socketHandle, 
					global::System.Net.Sockets.SocketOptionLevel__System_Private_Networking optionLevel, 
					global::System.Net.Sockets.SocketOptionName__System_Private_Networking optionName, 
					ref int optionValue, 
					int optionLength)
		{
			// Setup
			bool addRefed = false;
			int unsafe_optionValue;
			global::System.Net.Sockets.SocketError__System_Private_Networking unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			unsafe_optionValue = optionValue;
			// Call to native method
			unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.setsockopt(
								socketHandle.DangerousGetHandle(), 
								optionLevel, 
								optionName, 
								&(unsafe_optionValue), 
								optionLength
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, recv, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketFlags__System_Private_Networking__SocketFlags__System_Private_Networking, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "recv")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static int recv(
					global::System.IntPtr socketHandle, 
					byte* pinnedBuffer, 
					int len, 
					global::System.Net.Sockets.SocketFlags__System_Private_Networking socketFlags)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.recv(
								socketHandle, 
								((byte*)pinnedBuffer), 
								len, 
								socketFlags
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, closesocket, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketError__System_Private_Networking__SocketError__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+SafeNetHandles", "closesocket")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SocketError__System_Private_Networking closesocket(global::System.IntPtr socketHandle)
		{
			// Setup
			global::System.Net.Sockets.SocketError__System_Private_Networking unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.closesocket(socketHandle);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, ioctlsocket__0, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketError__System_Private_Networking__SocketError__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+SafeNetHandles", "ioctlsocket")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SocketError__System_Private_Networking ioctlsocket__0(
					global::System.IntPtr handle, 
					int cmd, 
					ref int argp)
		{
			// Setup
			int unsafe_argp;
			global::System.Net.Sockets.SocketError__System_Private_Networking unsafe___value;
			// Marshalling
			unsafe_argp = argp;
			// Call to native method
			unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.ioctlsocket__0(
								handle, 
								cmd, 
								&(unsafe_argp)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			argp = unsafe_argp;
			// Return
			return unsafe___value;
		}

		// Signature, WSAEventSelect, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketError__System_Private_Networking__SocketError__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_AsyncEventBits__System_Private_Networking__AsyncEventBits__System_Private_Networking, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+SafeNetHandles", "WSAEventSelect")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SocketError__System_Private_Networking WSAEventSelect(
					global::System.IntPtr handle, 
					global::System.IntPtr Event, 
					global::System.Net.Sockets.AsyncEventBits__System_Private_Networking NetworkEvents)
		{
			// Setup
			global::System.Net.Sockets.SocketError__System_Private_Networking unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.WSAEventSelect(
								handle, 
								Event, 
								NetworkEvents
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, setsockopt__0, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketError__System_Private_Networking__SocketError__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketOptionLevel__System_Private_Networking__SocketOptionLevel__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketOptionName__System_Private_Networking__SocketOptionName__System_Private_Networking, [fwd] [in] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] System_Net_Sockets_Linger__System_Private_Networking__System_Net_Sockets__Linger__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+SafeNetHandles", "setsockopt")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SocketError__System_Private_Networking setsockopt__0(
					global::System.IntPtr handle, 
					global::System.Net.Sockets.SocketOptionLevel__System_Private_Networking optionLevel, 
					global::System.Net.Sockets.SocketOptionName__System_Private_Networking optionName, 
					ref global::System.Net.Sockets.Linger__System_Private_Networking linger, 
					int optionLength)
		{
			// Setup
			global::System.Net.Sockets.Linger__System_Private_Networking unsafe_linger;
			global::System.Net.Sockets.SocketError__System_Private_Networking unsafe___value;
			// Marshalling
			unsafe_linger = linger;
			// Call to native method
			unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.setsockopt__0(
								handle, 
								optionLevel, 
								optionName, 
								&(unsafe_linger), 
								optionLength
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, bind, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketError__System_Private_Networking__SocketError__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Net_Sockets_SafeCloseSocket__System_Private_Networking____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "bind")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SocketError__System_Private_Networking bind(
					global::System.Net.Sockets.SafeCloseSocket__System_Private_Networking socketHandle, 
					byte[] socketAddress, 
					int socketAddressSize)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_socketAddress;
			global::System.Net.Sockets.SocketError__System_Private_Networking unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_socketAddress = global::McgInterop.McgCoreHelpers.GetArrayForCompat(socketAddress))
			{
				unsafe_socketAddress = (byte*)pinned_socketAddress;
				// Call to native method
				unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.bind(
									socketHandle.DangerousGetHandle(), 
									unsafe_socketAddress, 
									socketAddressSize
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, WSAGetOverlappedResult, [fwd] [return] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Net_Sockets_SafeCloseSocket__System_Private_Networking____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketFlags__System_Private_Networking__SocketFlags__System_Private_Networking, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "WSAGetOverlappedResult")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static bool WSAGetOverlappedResult(
					global::System.Net.Sockets.SafeCloseSocket__System_Private_Networking socketHandle, 
					global::System.Runtime.InteropServices.SafeHandle overlapped, 
					out uint bytesTransferred, 
					bool wait, 
					out global::System.Net.Sockets.SocketFlags__System_Private_Networking socketFlags)
		{
			// Setup
			bool addRefed = false;
			bool addRefed_1 = false;
			uint unsafe_bytesTransferred;
			global::System.Net.Sockets.SocketFlags__System_Private_Networking unsafe_socketFlags;
			int unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			overlapped.DangerousAddRef(ref addRefed_1);
			// Call to native method
			unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.WSAGetOverlappedResult(
								socketHandle.DangerousGetHandle(), 
								overlapped.DangerousGetHandle(), 
								&(unsafe_bytesTransferred), 
								(wait ? 1 : 0), 
								&(unsafe_socketFlags)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			socketFlags = unsafe_socketFlags;
			bytesTransferred = unsafe_bytesTransferred;
			if (addRefed_1)
				overlapped.DangerousRelease();
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value != 0;
		}

		// Signature, setsockopt__1, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketError__System_Private_Networking__SocketError__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Net_Sockets_SafeCloseSocket__System_Private_Networking____w64 int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketOptionLevel__System_Private_Networking__SocketOptionLevel__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketOptionName__System_Private_Networking__SocketOptionName__System_Private_Networking, [fwd] [in] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "setsockopt")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SocketError__System_Private_Networking setsockopt__1(
					global::System.Net.Sockets.SafeCloseSocket__System_Private_Networking socketHandle, 
					global::System.Net.Sockets.SocketOptionLevel__System_Private_Networking optionLevel, 
					global::System.Net.Sockets.SocketOptionName__System_Private_Networking optionName, 
					ref global::System.IntPtr pointer, 
					int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System.IntPtr unsafe_pointer;
			global::System.Net.Sockets.SocketError__System_Private_Networking unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			unsafe_pointer = pointer;
			// Call to native method
			unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.setsockopt__1(
								socketHandle.DangerousGetHandle(), 
								optionLevel, 
								optionName, 
								&(unsafe_pointer), 
								optionLength
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, setsockopt__2, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketError__System_Private_Networking__SocketError__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Net_Sockets_SafeCloseSocket__System_Private_Networking____w64 int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketOptionLevel__System_Private_Networking__SocketOptionLevel__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketOptionName__System_Private_Networking__SocketOptionName__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "setsockopt")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SocketError__System_Private_Networking setsockopt__2(
					global::System.Net.Sockets.SafeCloseSocket__System_Private_Networking socketHandle, 
					global::System.Net.Sockets.SocketOptionLevel__System_Private_Networking optionLevel, 
					global::System.Net.Sockets.SocketOptionName__System_Private_Networking optionName, 
					byte[] optionValue, 
					int optionLength)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_optionValue;
			global::System.Net.Sockets.SocketError__System_Private_Networking unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_optionValue = global::McgInterop.McgCoreHelpers.GetArrayForCompat(optionValue))
			{
				unsafe_optionValue = (byte*)pinned_optionValue;
				// Call to native method
				unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.setsockopt__2(
									socketHandle.DangerousGetHandle(), 
									optionLevel, 
									optionName, 
									unsafe_optionValue, 
									optionLength
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getsockopt, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketError__System_Private_Networking__SocketError__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Net_Sockets_SafeCloseSocket__System_Private_Networking____w64 int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketOptionLevel__System_Private_Networking__SocketOptionLevel__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketOptionName__System_Private_Networking__SocketOptionName__System_Private_Networking, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "getsockopt")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SocketError__System_Private_Networking getsockopt(
					global::System.Net.Sockets.SafeCloseSocket__System_Private_Networking socketHandle, 
					global::System.Net.Sockets.SocketOptionLevel__System_Private_Networking optionLevel, 
					global::System.Net.Sockets.SocketOptionName__System_Private_Networking optionName, 
					out int optionValue, 
					ref int optionLength)
		{
			// Setup
			bool addRefed = false;
			int unsafe_optionValue;
			int unsafe_optionLength;
			global::System.Net.Sockets.SocketError__System_Private_Networking unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			unsafe_optionLength = optionLength;
			// Call to native method
			unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.getsockopt(
								socketHandle.DangerousGetHandle(), 
								optionLevel, 
								optionName, 
								&(unsafe_optionValue), 
								&(unsafe_optionLength)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			optionLength = unsafe_optionLength;
			optionValue = unsafe_optionValue;
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getsockname, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketError__System_Private_Networking__SocketError__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Net_Sockets_SafeCloseSocket__System_Private_Networking____w64 int, [fwd] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "getsockname")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SocketError__System_Private_Networking getsockname(
					global::System.Net.Sockets.SafeCloseSocket__System_Private_Networking socketHandle, 
					byte[] socketAddress, 
					ref int socketAddressSize)
		{
			// Setup
			bool addRefed = false;
			byte* unsafe_socketAddress;
			int unsafe_socketAddressSize;
			global::System.Net.Sockets.SocketError__System_Private_Networking unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			fixed (byte* pinned_socketAddress = global::McgInterop.McgCoreHelpers.GetArrayForCompat(socketAddress))
			{
				unsafe_socketAddress = (byte*)pinned_socketAddress;
				unsafe_socketAddressSize = socketAddressSize;
				// Call to native method
				unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.getsockname(
									socketHandle.DangerousGetHandle(), 
									unsafe_socketAddress, 
									&(unsafe_socketAddressSize)
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				socketAddressSize = unsafe_socketAddressSize;
			}
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getsockopt__0, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketError__System_Private_Networking__SocketError__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Net_Sockets_SafeCloseSocket__System_Private_Networking____w64 int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketOptionLevel__System_Private_Networking__SocketOptionLevel__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketOptionName__System_Private_Networking__SocketOptionName__System_Private_Networking, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] System_Net_Sockets_Linger__System_Private_Networking__System_Net_Sockets__Linger__System_Private_Networking, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "getsockopt")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SocketError__System_Private_Networking getsockopt__0(
					global::System.Net.Sockets.SafeCloseSocket__System_Private_Networking socketHandle, 
					global::System.Net.Sockets.SocketOptionLevel__System_Private_Networking optionLevel, 
					global::System.Net.Sockets.SocketOptionName__System_Private_Networking optionName, 
					out global::System.Net.Sockets.Linger__System_Private_Networking optionValue, 
					ref int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System.Net.Sockets.Linger__System_Private_Networking unsafe_optionValue;
			int unsafe_optionLength;
			global::System.Net.Sockets.SocketError__System_Private_Networking unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			unsafe_optionLength = optionLength;
			// Call to native method
			unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.getsockopt__0(
								socketHandle.DangerousGetHandle(), 
								optionLevel, 
								optionName, 
								&(unsafe_optionValue), 
								&(unsafe_optionLength)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			optionLength = unsafe_optionLength;
			optionValue = unsafe_optionValue;
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getsockopt__1, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketError__System_Private_Networking__SocketError__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Net_Sockets_SafeCloseSocket__System_Private_Networking____w64 int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketOptionLevel__System_Private_Networking__SocketOptionLevel__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketOptionName__System_Private_Networking__SocketOptionName__System_Private_Networking, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] System_Net_Sockets_IPMulticastRequest__System_Private_Networking__System_Net_Sockets__IPMulticastRequest__System_Private_Networking, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "getsockopt")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SocketError__System_Private_Networking getsockopt__1(
					global::System.Net.Sockets.SafeCloseSocket__System_Private_Networking socketHandle, 
					global::System.Net.Sockets.SocketOptionLevel__System_Private_Networking optionLevel, 
					global::System.Net.Sockets.SocketOptionName__System_Private_Networking optionName, 
					out global::System.Net.Sockets.IPMulticastRequest__System_Private_Networking optionValue, 
					ref int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System.Net.Sockets.IPMulticastRequest__System_Private_Networking unsafe_optionValue;
			int unsafe_optionLength;
			global::System.Net.Sockets.SocketError__System_Private_Networking unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			unsafe_optionLength = optionLength;
			// Call to native method
			unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.getsockopt__1(
								socketHandle.DangerousGetHandle(), 
								optionLevel, 
								optionName, 
								&(unsafe_optionValue), 
								&(unsafe_optionLength)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			optionLength = unsafe_optionLength;
			optionValue = unsafe_optionValue;
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, getsockopt__2, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketError__System_Private_Networking__SocketError__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Net_Sockets_SafeCloseSocket__System_Private_Networking____w64 int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketOptionLevel__System_Private_Networking__SocketOptionLevel__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketOptionName__System_Private_Networking__SocketOptionName__System_Private_Networking, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.StructMarshaller] System_Net_Sockets_IPv6MulticastRequest__System_Private_Networking__System_Net_Sockets__IPv6MulticastRequest__System_Private_Networking, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "getsockopt")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SocketError__System_Private_Networking getsockopt__2(
					global::System.Net.Sockets.SafeCloseSocket__System_Private_Networking socketHandle, 
					global::System.Net.Sockets.SocketOptionLevel__System_Private_Networking optionLevel, 
					global::System.Net.Sockets.SocketOptionName__System_Private_Networking optionName, 
					out global::System.Net.Sockets.IPv6MulticastRequest__System_Private_Networking optionValue, 
					ref int optionLength)
		{
			// Setup
			bool addRefed = false;
			global::System.Net.Sockets.IPv6MulticastRequest__System_Private_Networking__Impl.UnsafeType unsafe_optionValue = default(global::System.Net.Sockets.IPv6MulticastRequest__System_Private_Networking__Impl.UnsafeType);
			int unsafe_optionLength;
			global::System.Net.Sockets.SocketError__System_Private_Networking unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			unsafe_optionValue = default(global::System.Net.Sockets.IPv6MulticastRequest__System_Private_Networking__Impl.UnsafeType);
			unsafe_optionLength = optionLength;
			// Call to native method
			unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.getsockopt__2(
								socketHandle.DangerousGetHandle(), 
								optionLevel, 
								optionName, 
								&(unsafe_optionValue), 
								&(unsafe_optionLength)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			optionLength = unsafe_optionLength;
			global::System.Net.Sockets.IPv6MulticastRequest__System_Private_Networking__Impl.Marshal__UnsafeToSafe(
								ref unsafe_optionValue, 
								out optionValue
							);
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, gethostbyaddr, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_ProtocolFamily__System_Private_Networking__ProtocolFamily__System_Private_Networking, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "gethostbyaddr")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.IntPtr gethostbyaddr(
					ref int addr, 
					int len, 
					global::System.Net.Sockets.ProtocolFamily__System_Private_Networking type)
		{
			// Setup
			int unsafe_addr;
			global::System.IntPtr unsafe___value;
			// Marshalling
			unsafe_addr = addr;
			// Call to native method
			unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.gethostbyaddr(
								&(unsafe_addr), 
								len, 
								type
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
			return unsafe___value;
		}

		// Signature, gethostbyname, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.AnsiStringMarshaller] string__unsigned char *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "gethostbyname")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.IntPtr gethostbyname(string host)
		{
			// Setup
			byte* unsafe_host = default(byte*);
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				unsafe_host = global::System.Runtime.InteropServices.McgMarshal.StringToAnsiString(host, false, true);
				// Call to native method
				unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.gethostbyname(unsafe_host);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_host);
			}
		}

		// Signature, WSAIoctl, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketError__System_Private_Networking__SocketError__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Net_Sockets_SafeCloseSocket__System_Private_Networking____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_Guid__System.Guid, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "WSAIoctl")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SocketError__System_Private_Networking WSAIoctl(
					global::System.Net.Sockets.SafeCloseSocket__System_Private_Networking socketHandle, 
					int ioControlCode, 
					ref global::System.Guid guid, 
					int guidSize, 
					out global::System.IntPtr funcPtr, 
					int funcPtrSize, 
					out int bytesTransferred, 
					global::System.IntPtr shouldBeNull, 
					global::System.IntPtr shouldBeNull2)
		{
			// Setup
			bool addRefed = false;
			global::System.Guid unsafe_guid;
			global::System.IntPtr unsafe_funcPtr;
			int unsafe_bytesTransferred;
			global::System.Net.Sockets.SocketError__System_Private_Networking unsafe___value;
			// Marshalling
			socketHandle.DangerousAddRef(ref addRefed);
			unsafe_guid = guid;
			// Call to native method
			unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.WSAIoctl(
								socketHandle.DangerousGetHandle(), 
								ioControlCode, 
								&(unsafe_guid), 
								guidSize, 
								&(unsafe_funcPtr), 
								funcPtrSize, 
								&(unsafe_bytesTransferred), 
								shouldBeNull, 
								shouldBeNull2
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			bytesTransferred = unsafe_bytesTransferred;
			funcPtr = unsafe_funcPtr;
			guid = unsafe_guid;
			if (addRefed)
				socketHandle.DangerousRelease();
			// Return
			return unsafe___value;
		}

		// Signature, GetNameInfoW, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_Sockets_SocketError__System_Private_Networking__SocketError__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+OSSOCK", "GetNameInfoW")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.Sockets.SocketError__System_Private_Networking GetNameInfoW(
					byte[] sa, 
					int salen, 
					global::System.Text.StringBuilder host, 
					int hostlen, 
					global::System.Text.StringBuilder serv, 
					int servlen, 
					int flags)
		{
			// Setup
			byte* unsafe_sa;
			ushort* unsafe_host = default(ushort*);
			ushort* unsafe_serv = default(ushort*);
			global::System.Net.Sockets.SocketError__System_Private_Networking unsafe___value;
			try
			{
				// Marshalling
				fixed (byte* pinned_sa = global::McgInterop.McgCoreHelpers.GetArrayForCompat(sa))
				{
					unsafe_sa = (byte*)pinned_sa;
					if (host == null)
						unsafe_host = null;
					else
					{
						unsafe_host = (ushort*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(host.Capacity * 2 
											+ 2)));
						if (unsafe_host == null)
							throw new global::System.OutOfMemoryException();
					}
					if (unsafe_host != null)
						global::System.Runtime.InteropServices.McgMarshal.StringBuilderToUnicodeString(
											host, 
											unsafe_host
										);
					if (serv == null)
						unsafe_serv = null;
					else
					{
						unsafe_serv = (ushort*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(serv.Capacity * 2 
											+ 2)));
						if (unsafe_serv == null)
							throw new global::System.OutOfMemoryException();
					}
					if (unsafe_serv != null)
						global::System.Runtime.InteropServices.McgMarshal.StringBuilderToUnicodeString(
											serv, 
											unsafe_serv
										);
					// Call to native method
					unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.GetNameInfoW(
										unsafe_sa, 
										salen, 
										unsafe_host, 
										hostlen, 
										unsafe_serv, 
										servlen, 
										flags
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					if (serv != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_serv, 
											serv
										);
					if (host != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_host, 
											host
										);
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_host != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_host);
				if (unsafe_serv != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_serv);
			}
		}

		// Signature, GetAddrInfoW, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableStructMarshaller] System_Net_Sockets_AddressInfo__System_Private_Networking__System_Net_Sockets__AddressInfo__System_Private_Networking, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.Win32HandleMarshaller] System_Net_Sockets_SafeFreeAddrInfo__System_Private_Networking____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+SafeNetHandlesXPOrLater", "GetAddrInfoW")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static int GetAddrInfoW(
					string nodename, 
					string servicename, 
					ref global::System.Net.Sockets.AddressInfo__System_Private_Networking hints, 
					out global::System.Net.Sockets.SafeFreeAddrInfo__System_Private_Networking handle)
		{
			// Setup
			ushort* unsafe_nodename = default(ushort*);
			ushort* unsafe_servicename = default(ushort*);
			global::System.Net.Sockets.AddressInfo__System_Private_Networking unsafe_hints;
			global::System.IntPtr unsafe_handle;
			int unsafe___value;
			// Marshalling
			fixed (char* pinned_nodename = nodename)
			{
				unsafe_nodename = (ushort*)pinned_nodename;
				fixed (char* pinned_servicename = servicename)
				{
					unsafe_servicename = (ushort*)pinned_servicename;
					unsafe_hints = hints;
					handle = new global::System.Net.Sockets.SafeFreeAddrInfo__System_Private_Networking();
					unsafe_handle = handle.DangerousGetHandle();
					// Call to native method
					unsafe___value = global::McgInterop.ws2_32_dll_PInvokes.GetAddrInfoW(
										unsafe_nodename, 
										unsafe_servicename, 
										&(unsafe_hints), 
										&(unsafe_handle)
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
					global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
										handle, 
										unsafe_handle
									);
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, freeaddrinfo, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.Sockets.UnsafeSocketsNativeMethods+SafeNetHandlesXPOrLater", "freeaddrinfo")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static void freeaddrinfo(global::System.IntPtr info)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.ws2_32_dll_PInvokes.freeaddrinfo(info);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-localization-l1-2-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_localization_l1_2_0_dll
	{
		// Signature, IsValidLocaleName, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] char___ptrwchar_t *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "IsValidLocaleName")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static int IsValidLocaleName(char* lpLocaleName)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.IsValidLocaleName(((ushort*)lpLocaleName));
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, ResolveLocaleName, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] char___ptrwchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] char___ptrwchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.WinRTInterop.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "mincore+mincore_PInvokes", "ResolveLocaleName")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static int ResolveLocaleName(
					char* lpNameToResolve, 
					char* lpLocaleName, 
					int cchLocaleName)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.ResolveLocaleName(
								((ushort*)lpNameToResolve), 
								((ushort*)lpLocaleName), 
								cchLocaleName
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, GetCPInfoExW, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages___ptr__Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Text.Encoding.CodePages, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "GetCPInfoExW")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static int GetCPInfoExW(
					uint CodePage, 
					uint dwFlags, 
					global::Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages* lpCPInfoEx)
		{
			// Setup
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.GetCPInfoExW(
								CodePage, 
								dwFlags, 
								((global::Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages*)lpCPInfoEx)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
			return unsafe___value;
		}

		// Signature, FormatMessage, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__wchar_t *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_System_IntPtr____w64 int *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("Microsoft.Win32.Primitives, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "FormatMessage")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static int FormatMessage(
					int dwFlags, 
					global::System.IntPtr lpSource_mustBeNull, 
					uint dwMessageId, 
					int dwLanguageId, 
					global::System.Text.StringBuilder lpBuffer, 
					int nSize, 
					global::System.IntPtr[] arguments)
		{
			// Setup
			ushort* unsafe_lpBuffer = default(ushort*);
			global::System.IntPtr* unsafe_arguments;
			int unsafe___value;
			try
			{
				// Marshalling
				if (lpBuffer == null)
					unsafe_lpBuffer = null;
				else
				{
					unsafe_lpBuffer = (ushort*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(lpBuffer.Capacity * 2 
										+ 2)));
					if (unsafe_lpBuffer == null)
						throw new global::System.OutOfMemoryException();
				}
				if (unsafe_lpBuffer != null)
					global::System.Runtime.InteropServices.McgMarshal.StringBuilderToUnicodeString(
										lpBuffer, 
										unsafe_lpBuffer
									);
				fixed (global::System.IntPtr* pinned_arguments = global::McgInterop.McgCoreHelpers.GetArrayForCompat(arguments))
				{
					unsafe_arguments = (global::System.IntPtr*)pinned_arguments;
					// Call to native method
					unsafe___value = global::McgInterop.api_ms_win_core_localization_l1_2_0_dll_PInvokes.FormatMessage(
										dwFlags, 
										lpSource_mustBeNull, 
										dwMessageId, 
										dwLanguageId, 
										unsafe_lpBuffer, 
										nSize, 
										unsafe_arguments
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				}
				if (lpBuffer != null)
					global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
										unsafe_lpBuffer, 
										lpBuffer
									);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_lpBuffer != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_lpBuffer);
			}
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-threadpool-l1-2-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_threadpool_l1_2_0_dll
	{
		// Signature, CreateThreadpoolIo, [fwd] [return] [Mcg.CodeGen.Win32HandleMarshaller] Microsoft_Win32_SafeHandles_SafeThreadPoolIOHandle__System_Threading_Overlapped____w64 int, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] System_Runtime_InteropServices_SafeHandle____w64 int, [fwd] [in] [Mcg.CodeGen.PInvokeDelegateMarshaller] Interop_NativeIoCompletionCallback__System_Threading_Overlapped____Interop_NativeIoCompletionCallback__System_Threading_Overlapped, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Threading.Overlapped, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "CreateThreadpoolIo")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::Microsoft.Win32.SafeHandles.SafeThreadPoolIOHandle__System_Threading_Overlapped CreateThreadpoolIo(
					global::System.Runtime.InteropServices.SafeHandle fl, 
					global::Interop_NativeIoCompletionCallback__System_Threading_Overlapped pfnio, 
					global::System.IntPtr context, 
					global::System.IntPtr pcbe)
		{
			// Setup
			bool addRefed = false;
			void* unsafe_pfnio = default(void*);
			global::Microsoft.Win32.SafeHandles.SafeThreadPoolIOHandle__System_Threading_Overlapped __value;
			global::System.IntPtr unsafe___value;
			try
			{
				// Marshalling
				fl.DangerousAddRef(ref addRefed);
				unsafe_pfnio = (void*)global::System.Runtime.InteropServices.McgModuleManager.GetStubForPInvokeDelegate(
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("Interop+NativeIoCompletionCallback,System.Threading.Overlapped, Version=4.0.0.0, Culture=neutral, PublicKeyToken" +
											"=b03f5f7f11d50a3a"), 
									pfnio
								);
				__value = new global::Microsoft.Win32.SafeHandles.SafeThreadPoolIOHandle__System_Threading_Overlapped();
				// Call to native method
				unsafe___value = global::McgInterop.api_ms_win_core_threadpool_l1_2_0_dll_PInvokes.CreateThreadpoolIo(
									fl.DangerousGetHandle(), 
									unsafe_pfnio, 
									context, 
									pcbe
								);
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				global::System.Runtime.InteropServices.McgMarshal.SaveLastWin32Error();
				global::System.Runtime.InteropServices.McgMarshal.InitializeHandle(
									__value, 
									unsafe___value
								);
				if (addRefed)
					fl.DangerousRelease();
				// Return
				return __value;
			}
			finally
			{
				// Cleanup
				global::System.GC.KeepAlive(pfnio);
			}
		}

		// Signature, StartThreadpoolIo, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Microsoft_Win32_SafeHandles_SafeThreadPoolIOHandle__System_Threading_Overlapped____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Threading.Overlapped, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "StartThreadpoolIo")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static void StartThreadpoolIo(global::Microsoft.Win32.SafeHandles.SafeThreadPoolIOHandle__System_Threading_Overlapped pio)
		{
			// Setup
			bool addRefed = false;
			// Marshalling
			pio.DangerousAddRef(ref addRefed);
			// Call to native method
			global::McgInterop.api_ms_win_core_threadpool_l1_2_0_dll_PInvokes.StartThreadpoolIo(pio.DangerousGetHandle());
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			if (addRefed)
				pio.DangerousRelease();
			// Return
		}

		// Signature, CancelThreadpoolIo, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.Win32HandleMarshaller] Microsoft_Win32_SafeHandles_SafeThreadPoolIOHandle__System_Threading_Overlapped____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Threading.Overlapped, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "CancelThreadpoolIo")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static void CancelThreadpoolIo(global::Microsoft.Win32.SafeHandles.SafeThreadPoolIOHandle__System_Threading_Overlapped pio)
		{
			// Setup
			bool addRefed = false;
			// Marshalling
			pio.DangerousAddRef(ref addRefed);
			// Call to native method
			global::McgInterop.api_ms_win_core_threadpool_l1_2_0_dll_PInvokes.CancelThreadpoolIo(pio.DangerousGetHandle());
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			if (addRefed)
				pio.DangerousRelease();
			// Return
		}

		// Signature, CloseThreadpoolIo, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Threading.Overlapped, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Interop+mincore", "CloseThreadpoolIo")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static void CloseThreadpoolIo(global::System.IntPtr pio)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.api_ms_win_core_threadpool_l1_2_0_dll_PInvokes.CloseThreadpoolIo(pio);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'ntdll.dll'
	/// </summary>
	public unsafe static partial class ntdll_dll
	{
		// Signature, RtlIpv6AddressToStringExW, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_UnsafeCommonNativeMethods_NtStatus__System_Private_Networking__UnsafeCommonNativeMethods_NtStatus__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] ushort__unsigned short, [fwd] [in] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.UnsafeCommonNativeMethods", "RtlIpv6AddressToStringExW")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.UnsafeCommonNativeMethods_NtStatus__System_Private_Networking RtlIpv6AddressToStringExW(
					byte[] address, 
					uint scopeId, 
					ushort port, 
					global::System.Text.StringBuilder addressString, 
					ref uint addressStringLength)
		{
			// Setup
			byte* unsafe_address;
			ushort* unsafe_addressString = default(ushort*);
			uint unsafe_addressStringLength;
			global::System.Net.UnsafeCommonNativeMethods_NtStatus__System_Private_Networking unsafe___value;
			try
			{
				// Marshalling
				fixed (byte* pinned_address = global::McgInterop.McgCoreHelpers.GetArrayForCompat(address))
				{
					unsafe_address = (byte*)pinned_address;
					if (addressString == null)
						unsafe_addressString = null;
					else
					{
						unsafe_addressString = (ushort*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(addressString.Capacity * 2 
											+ 2)));
						if (unsafe_addressString == null)
							throw new global::System.OutOfMemoryException();
					}
					if (unsafe_addressString != null)
						global::System.Runtime.InteropServices.McgMarshal.StringBuilderToUnicodeString(
											addressString, 
											unsafe_addressString
										);
					unsafe_addressStringLength = addressStringLength;
					// Call to native method
					unsafe___value = global::McgInterop.ntdll_dll_PInvokes.RtlIpv6AddressToStringExW(
										unsafe_address, 
										scopeId, 
										port, 
										unsafe_addressString, 
										&(unsafe_addressStringLength)
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					addressStringLength = unsafe_addressStringLength;
					if (addressString != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_addressString, 
											addressString
										);
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_addressString != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_addressString);
			}
		}

		// Signature, RtlIpv4AddressToStringExW, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_UnsafeCommonNativeMethods_NtStatus__System_Private_Networking__UnsafeCommonNativeMethods_NtStatus__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] ushort__unsigned short, [fwd] [in] [out] [Mcg.CodeGen.StringBuilderMarshaller] System_Text_StringBuilder__wchar_t *, [fwd] [in] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.UnsafeCommonNativeMethods", "RtlIpv4AddressToStringExW")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.UnsafeCommonNativeMethods_NtStatus__System_Private_Networking RtlIpv4AddressToStringExW(
					byte[] address, 
					ushort port, 
					global::System.Text.StringBuilder addressString, 
					ref uint addressStringLength)
		{
			// Setup
			byte* unsafe_address;
			ushort* unsafe_addressString = default(ushort*);
			uint unsafe_addressStringLength;
			global::System.Net.UnsafeCommonNativeMethods_NtStatus__System_Private_Networking unsafe___value;
			try
			{
				// Marshalling
				fixed (byte* pinned_address = global::McgInterop.McgCoreHelpers.GetArrayForCompat(address))
				{
					unsafe_address = (byte*)pinned_address;
					if (addressString == null)
						unsafe_addressString = null;
					else
					{
						unsafe_addressString = (ushort*)global::McgInterop.McgHelpers.CoTaskMemAllocAndZeroMemory(new global::System.IntPtr(checked(addressString.Capacity * 2 
											+ 2)));
						if (unsafe_addressString == null)
							throw new global::System.OutOfMemoryException();
					}
					if (unsafe_addressString != null)
						global::System.Runtime.InteropServices.McgMarshal.StringBuilderToUnicodeString(
											addressString, 
											unsafe_addressString
										);
					unsafe_addressStringLength = addressStringLength;
					// Call to native method
					unsafe___value = global::McgInterop.ntdll_dll_PInvokes.RtlIpv4AddressToStringExW(
										unsafe_address, 
										port, 
										unsafe_addressString, 
										&(unsafe_addressStringLength)
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					addressStringLength = unsafe_addressStringLength;
					if (addressString != null)
						global::System.Runtime.InteropServices.McgMarshal.UnicodeStringToStringBuilder(
											unsafe_addressString, 
											addressString
										);
				}
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				if (unsafe_addressString != null)
					global::System.Runtime.InteropServices.ExternalInterop.SafeCoTaskMemFree(unsafe_addressString);
			}
		}

		// Signature, RtlIpv6StringToAddressExW, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_UnsafeCommonNativeMethods_NtStatus__System_Private_Networking__UnsafeCommonNativeMethods_NtStatus__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] uint__unsigned int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.UnsafeCommonNativeMethods", "RtlIpv6StringToAddressExW")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.UnsafeCommonNativeMethods_NtStatus__System_Private_Networking RtlIpv6StringToAddressExW(
					string s, 
					byte[] address, 
					out uint scopeId, 
					out ushort port)
		{
			// Setup
			ushort* unsafe_s = default(ushort*);
			byte* unsafe_address;
			uint unsafe_scopeId;
			ushort unsafe_port;
			global::System.Net.UnsafeCommonNativeMethods_NtStatus__System_Private_Networking unsafe___value;
			// Marshalling
			fixed (char* pinned_s = s)
			{
				unsafe_s = (ushort*)pinned_s;
				fixed (byte* pinned_address = global::McgInterop.McgCoreHelpers.GetArrayForCompat(address))
				{
					unsafe_address = (byte*)pinned_address;
					// Call to native method
					unsafe___value = global::McgInterop.ntdll_dll_PInvokes.RtlIpv6StringToAddressExW(
										unsafe_s, 
										unsafe_address, 
										&(unsafe_scopeId), 
										&(unsafe_port)
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					port = unsafe_port;
					scopeId = unsafe_scopeId;
				}
			}
			// Return
			return unsafe___value;
		}

		// Signature, RtlIpv4StringToAddressExW, [fwd] [return] [Mcg.CodeGen.EnumMarshaller] System_Net_UnsafeCommonNativeMethods_NtStatus__System_Private_Networking__UnsafeCommonNativeMethods_NtStatus__System_Private_Networking, [fwd] [in] [Mcg.CodeGen.UnicodeStringMarshaller] string__wchar_t *, [fwd] [in] [Mcg.CodeGen.Win32BoolMarshaller] bool__System.Boolean, [fwd] [out] [Mcg.CodeGen.BlittableArrayMarshaller] rg_byte__unsigned char *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] ushort__unsigned short, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.Networking, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Net.UnsafeCommonNativeMethods", "RtlIpv4StringToAddressExW")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static global::System.Net.UnsafeCommonNativeMethods_NtStatus__System_Private_Networking RtlIpv4StringToAddressExW(
					string s, 
					bool strict, 
					byte[] address, 
					out ushort port)
		{
			// Setup
			ushort* unsafe_s = default(ushort*);
			byte* unsafe_address;
			ushort unsafe_port;
			global::System.Net.UnsafeCommonNativeMethods_NtStatus__System_Private_Networking unsafe___value;
			// Marshalling
			fixed (char* pinned_s = s)
			{
				unsafe_s = (ushort*)pinned_s;
				fixed (byte* pinned_address = global::McgInterop.McgCoreHelpers.GetArrayForCompat(address))
				{
					unsafe_address = (byte*)pinned_address;
					// Call to native method
					unsafe___value = global::McgInterop.ntdll_dll_PInvokes.RtlIpv4StringToAddressExW(
										unsafe_s, 
										(strict ? 1 : 0), 
										unsafe_address, 
										&(unsafe_port)
									);
					global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
					port = unsafe_port;
				}
			}
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-com-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_com_l1_1_0_dll
	{
		// Signature, CoCreateInstance, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] byte___ptrunsigned char *, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.StackTraceGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.StackTraceGenerator.StackTraceGenerator", "CoCreateInstance")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static int CoCreateInstance(
					byte* rclsid, 
					global::System.IntPtr pUnkOuter, 
					int dwClsContext, 
					byte* riid, 
					out global::System.IntPtr ppv)
		{
			// Setup
			global::System.IntPtr unsafe_ppv;
			int unsafe___value;
			// Marshalling
			// Call to native method
			unsafe___value = global::McgInterop.api_ms_win_core_com_l1_1_0_dll_PInvokes.CoCreateInstance(
								((byte*)rclsid), 
								pUnkOuter, 
								dwClsContext, 
								((byte*)riid), 
								&(unsafe_ppv)
							);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			ppv = unsafe_ppv;
			// Return
			return unsafe___value;
		}
	}

	/// <summary>
	/// P/Invoke class for module 'OleAut32'
	/// </summary>
	public unsafe static partial class OleAut32
	{
		// Signature, SysFreeString, [fwd] [return] [Mcg.CodeGen.VoidReturnMarshaller] void__void, [fwd] [in] [Mcg.CodeGen.BlittableValueMarshaller] System_IntPtr____w64 int, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Private.StackTraceGenerator, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "Internal.LightweightInterop.MarshalExtensions", "SysFreeString")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static void SysFreeString(global::System.IntPtr bstr)
		{
			// Marshalling
			// Call to native method
			global::McgInterop.OleAut32_PInvokes.SysFreeString(bstr);
			global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
			// Return
		}
	}

	/// <summary>
	/// P/Invoke class for module 'api-ms-win-core-winrt-robuffer-l1-1-0.dll'
	/// </summary>
	public unsafe static partial class api_ms_win_core_winrt_robuffer_l1_1_0_dll
	{
		// Signature, RoGetBufferMarshaler, [fwd] [return] [Mcg.CodeGen.BlittableValueMarshaller] int__int, [fwd] [out] [managedbyref] [nativebyref] [Mcg.CodeGen.ComInterfaceMarshaller] System_Runtime_InteropServices_IMarshal__System_Runtime_WindowsRuntime__System_Runtime_InteropServices__IMarshal__System_Runtime_WindowsRuntime *, 
		[global::System.Runtime.InteropServices.McgGeneratedMarshallingCode]
		[global::System.Runtime.InteropServices.McgPInvokeMarshalStub("System.Runtime.WindowsRuntime, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "Interop+mincore_PInvokes", "RoGetBufferMarshaler")]
		[global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
		public static int RoGetBufferMarshaler(out global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime bufferMarshalerPtr)
		{
			// Setup
			global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime__Impl.Vtbl** unsafe_bufferMarshalerPtr = default(global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime__Impl.Vtbl**);
			int unsafe___value;
			try
			{
				// Marshalling
				unsafe_bufferMarshalerPtr = null;
				// Call to native method
				unsafe___value = global::McgInterop.api_ms_win_core_winrt_robuffer_l1_1_0_dll_PInvokes.RoGetBufferMarshaler(&(unsafe_bufferMarshalerPtr));
				global::System.Runtime.InteropServices.DebugAnnotations.PreviousCallContainsUserCode();
				bufferMarshalerPtr = (global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime)global::System.Runtime.InteropServices.McgModuleManager.ComInterfaceToObject(
									((global::System.IntPtr)unsafe_bufferMarshalerPtr), 
									global::System.Runtime.InteropServices.TypeOfHelper.RuntimeTypeHandleOf("System.Runtime.InteropServices.IMarshal,System.Runtime.WindowsRuntime, Version=4.0.10.0, Culture=neutral, Public" +
											"KeyToken=b77a5c561934e089")
								);
				// Return
				return unsafe___value;
			}
			finally
			{
				// Cleanup
				global::System.Runtime.InteropServices.McgMarshal.ComSafeRelease(new global::System.IntPtr(((void*)unsafe_bufferMarshalerPtr)));
			}
		}
	}

	public unsafe static partial class _MRT__PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void RhWaitForPendingFinalizers(int allowReentrantWait);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RhCompatibleReentrantWaitAny(
					int alertable, 
					int timeout, 
					int count, 
					global::System.IntPtr* handles);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void _ecvt_s(
					byte* buffer, 
					int sizeInBytes, 
					double value, 
					int count, 
					int* dec, 
					int* sign);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("[MRT]", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void memmove(
					byte* dmem, 
					byte* smem, 
					ulong size);
	}

	public unsafe static partial class __PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("*", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void CallingConventionConverter_GetStubs(
					global::System.IntPtr* returnVoidStub, 
					global::System.IntPtr* returnIntegerStub, 
					global::System.IntPtr* commonStub);
	}

	public unsafe static partial class api_ms_win_core_errorhandling_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-errorhandling-l1-1-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetLastError();
	}

	public unsafe static partial class api_ms_win_core_winrt_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int RoInitialize(uint initType);
	}

	public unsafe static partial class ws2_32_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="#5", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.Sockets.SocketError__System_Private_Networking getpeername(
					global::System.IntPtr socketHandle, 
					byte* socketAddress, 
					int* socketAddressSize);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.Sockets.SocketError__System_Private_Networking WSASend(
					global::System.IntPtr socketHandle, 
					global::System.Net.Sockets.WSABuffer__System_Private_Networking* buffer, 
					int bufferCount, 
					int* bytesTransferred, 
					global::System.Net.Sockets.SocketFlags__System_Private_Networking socketFlags, 
					global::System.IntPtr overlapped, 
					global::System.IntPtr completionRoutine);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="WSASend", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.Sockets.SocketError__System_Private_Networking WSASend__0(
					global::System.IntPtr socketHandle, 
					global::System.Net.Sockets.WSABuffer__System_Private_Networking* buffersArray, 
					int bufferCount, 
					int* bytesTransferred, 
					global::System.Net.Sockets.SocketFlags__System_Private_Networking socketFlags, 
					global::System.IntPtr overlapped, 
					global::System.IntPtr completionRoutine);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.Sockets.SocketError__System_Private_Networking WSARecv(
					global::System.IntPtr socketHandle, 
					global::System.Net.Sockets.WSABuffer__System_Private_Networking* buffer, 
					int bufferCount, 
					int* bytesTransferred, 
					global::System.Net.Sockets.SocketFlags__System_Private_Networking* socketFlags, 
					global::System.IntPtr overlapped, 
					global::System.IntPtr completionRoutine);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="WSARecv", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.Sockets.SocketError__System_Private_Networking WSARecv__0(
					global::System.IntPtr socketHandle, 
					global::System.Net.Sockets.WSABuffer__System_Private_Networking* buffers, 
					int bufferCount, 
					int* bytesTransferred, 
					global::System.Net.Sockets.SocketFlags__System_Private_Networking* socketFlags, 
					global::System.IntPtr overlapped, 
					global::System.IntPtr completionRoutine);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="#115", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.Sockets.SocketError__System_Private_Networking WSAStartup(
					short wVersionRequested, 
					global::System.Net.Sockets.WSAData__System_Private_Networking__Impl.UnsafeType* lpWSAData);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr WSASocketW(
					global::System.Net.Sockets.AddressFamily__System_Private_Networking addressFamily, 
					global::System.Net.Sockets.SocketType__System_Private_Networking socketType, 
					global::System.Net.Sockets.ProtocolType__System_Private_Networking protocolType, 
					global::System.IntPtr protocolInfo, 
					uint group, 
					global::System.Net.Sockets.SocketConstructorFlags__System_Private_Networking flags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="#18", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int select(
					int ignoredParameter, 
					global::System.IntPtr* readfds, 
					global::System.IntPtr* writefds, 
					global::System.IntPtr* exceptfds, 
					global::System.Net.Sockets.TimeValue__System_Private_Networking* timeout);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="#18", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int select__0(
					int ignoredParameter, 
					global::System.IntPtr* readfds, 
					global::System.IntPtr* writefds, 
					global::System.IntPtr* exceptfds, 
					global::System.IntPtr nullTimeout);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="#10", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.Sockets.SocketError__System_Private_Networking ioctlsocket(
					global::System.IntPtr socketHandle, 
					int cmd, 
					int* argp);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="#22", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.Sockets.SocketError__System_Private_Networking shutdown(
					global::System.IntPtr socketHandle, 
					int how);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="#21", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.Sockets.SocketError__System_Private_Networking setsockopt(
					global::System.IntPtr socketHandle, 
					global::System.Net.Sockets.SocketOptionLevel__System_Private_Networking optionLevel, 
					global::System.Net.Sockets.SocketOptionName__System_Private_Networking optionName, 
					int* optionValue, 
					int optionLength);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="#16", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int recv(
					global::System.IntPtr socketHandle, 
					byte* pinnedBuffer, 
					int len, 
					global::System.Net.Sockets.SocketFlags__System_Private_Networking socketFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="#3", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.Sockets.SocketError__System_Private_Networking closesocket(global::System.IntPtr socketHandle);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="#10", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.Sockets.SocketError__System_Private_Networking ioctlsocket__0(
					global::System.IntPtr handle, 
					int cmd, 
					int* argp);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.Sockets.SocketError__System_Private_Networking WSAEventSelect(
					global::System.IntPtr handle, 
					global::System.IntPtr Event, 
					global::System.Net.Sockets.AsyncEventBits__System_Private_Networking NetworkEvents);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="#21", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.Sockets.SocketError__System_Private_Networking setsockopt__0(
					global::System.IntPtr handle, 
					global::System.Net.Sockets.SocketOptionLevel__System_Private_Networking optionLevel, 
					global::System.Net.Sockets.SocketOptionName__System_Private_Networking optionName, 
					global::System.Net.Sockets.Linger__System_Private_Networking* linger, 
					int optionLength);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="#2", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.Sockets.SocketError__System_Private_Networking bind(
					global::System.IntPtr socketHandle, 
					byte* socketAddress, 
					int socketAddressSize);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int WSAGetOverlappedResult(
					global::System.IntPtr socketHandle, 
					global::System.IntPtr overlapped, 
					uint* bytesTransferred, 
					int wait, 
					global::System.Net.Sockets.SocketFlags__System_Private_Networking* socketFlags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="#21", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.Sockets.SocketError__System_Private_Networking setsockopt__1(
					global::System.IntPtr socketHandle, 
					global::System.Net.Sockets.SocketOptionLevel__System_Private_Networking optionLevel, 
					global::System.Net.Sockets.SocketOptionName__System_Private_Networking optionName, 
					global::System.IntPtr* pointer, 
					int optionLength);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="#21", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.Sockets.SocketError__System_Private_Networking setsockopt__2(
					global::System.IntPtr socketHandle, 
					global::System.Net.Sockets.SocketOptionLevel__System_Private_Networking optionLevel, 
					global::System.Net.Sockets.SocketOptionName__System_Private_Networking optionName, 
					byte* optionValue, 
					int optionLength);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="#7", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.Sockets.SocketError__System_Private_Networking getsockopt(
					global::System.IntPtr socketHandle, 
					global::System.Net.Sockets.SocketOptionLevel__System_Private_Networking optionLevel, 
					global::System.Net.Sockets.SocketOptionName__System_Private_Networking optionName, 
					int* optionValue, 
					int* optionLength);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="#6", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.Sockets.SocketError__System_Private_Networking getsockname(
					global::System.IntPtr socketHandle, 
					byte* socketAddress, 
					int* socketAddressSize);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="#7", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.Sockets.SocketError__System_Private_Networking getsockopt__0(
					global::System.IntPtr socketHandle, 
					global::System.Net.Sockets.SocketOptionLevel__System_Private_Networking optionLevel, 
					global::System.Net.Sockets.SocketOptionName__System_Private_Networking optionName, 
					global::System.Net.Sockets.Linger__System_Private_Networking* optionValue, 
					int* optionLength);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="#7", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.Sockets.SocketError__System_Private_Networking getsockopt__1(
					global::System.IntPtr socketHandle, 
					global::System.Net.Sockets.SocketOptionLevel__System_Private_Networking optionLevel, 
					global::System.Net.Sockets.SocketOptionName__System_Private_Networking optionName, 
					global::System.Net.Sockets.IPMulticastRequest__System_Private_Networking* optionValue, 
					int* optionLength);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="#7", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.Sockets.SocketError__System_Private_Networking getsockopt__2(
					global::System.IntPtr socketHandle, 
					global::System.Net.Sockets.SocketOptionLevel__System_Private_Networking optionLevel, 
					global::System.Net.Sockets.SocketOptionName__System_Private_Networking optionName, 
					global::System.Net.Sockets.IPv6MulticastRequest__System_Private_Networking__Impl.UnsafeType* optionValue, 
					int* optionLength);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="#51", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr gethostbyaddr(
					int* addr, 
					int len, 
					global::System.Net.Sockets.ProtocolFamily__System_Private_Networking type);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", EntryPoint="#52", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr gethostbyname(byte* host);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.Sockets.SocketError__System_Private_Networking WSAIoctl(
					global::System.IntPtr socketHandle, 
					int ioControlCode, 
					global::System.Guid* guid, 
					int guidSize, 
					global::System.IntPtr* funcPtr, 
					int funcPtrSize, 
					int* bytesTransferred, 
					global::System.IntPtr shouldBeNull, 
					global::System.IntPtr shouldBeNull2);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.Sockets.SocketError__System_Private_Networking GetNameInfoW(
					byte* sa, 
					int salen, 
					ushort* host, 
					int hostlen, 
					ushort* serv, 
					int servlen, 
					int flags);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetAddrInfoW(
					ushort* nodename, 
					ushort* servicename, 
					global::System.Net.Sockets.AddressInfo__System_Private_Networking* hints, 
					global::System.IntPtr* handle);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ws2_32.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void freeaddrinfo(global::System.IntPtr info);
	}

	public unsafe static partial class api_ms_win_core_localization_l1_2_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int IsValidLocaleName(ushort* lpLocaleName);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int ResolveLocaleName(
					ushort* lpNameToResolve, 
					ushort* lpLocaleName, 
					int cchLocaleName);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-1.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int GetCPInfoExW(
					uint CodePage, 
					uint dwFlags, 
					global::Interop_mincore_CPINFOEXW__System_Text_Encoding_CodePages* lpCPInfoEx);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-localization-l1-2-1.dll", EntryPoint="FormatMessageW", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int FormatMessage(
					int dwFlags, 
					global::System.IntPtr lpSource_mustBeNull, 
					uint dwMessageId, 
					int dwLanguageId, 
					ushort* lpBuffer, 
					int nSize, 
					global::System.IntPtr* arguments);
	}

	public unsafe static partial class api_ms_win_core_threadpool_l1_2_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-threadpool-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.IntPtr CreateThreadpoolIo(
					global::System.IntPtr fl, 
					void* pfnio, 
					global::System.IntPtr context, 
					global::System.IntPtr pcbe);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-threadpool-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void StartThreadpoolIo(global::System.IntPtr pio);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-threadpool-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void CancelThreadpoolIo(global::System.IntPtr pio);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-threadpool-l1-2-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void CloseThreadpoolIo(global::System.IntPtr pio);
	}

	public unsafe static partial class ntdll_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ntdll.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.UnsafeCommonNativeMethods_NtStatus__System_Private_Networking RtlIpv6AddressToStringExW(
					byte* address, 
					uint scopeId, 
					ushort port, 
					ushort* addressString, 
					uint* addressStringLength);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ntdll.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.UnsafeCommonNativeMethods_NtStatus__System_Private_Networking RtlIpv4AddressToStringExW(
					byte* address, 
					ushort port, 
					ushort* addressString, 
					uint* addressStringLength);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ntdll.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.UnsafeCommonNativeMethods_NtStatus__System_Private_Networking RtlIpv6StringToAddressExW(
					ushort* s, 
					byte* address, 
					uint* scopeId, 
					ushort* port);

		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("ntdll.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static global::System.Net.UnsafeCommonNativeMethods_NtStatus__System_Private_Networking RtlIpv4StringToAddressExW(
					ushort* s, 
					int strict, 
					byte* address, 
					ushort* port);
	}

	public unsafe static partial class api_ms_win_core_com_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-com-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static int CoCreateInstance(
					byte* rclsid, 
					global::System.IntPtr pUnkOuter, 
					int dwClsContext, 
					byte* riid, 
					global::System.IntPtr* ppv);
	}

	public unsafe static partial class OleAut32_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("oleaut32.dll", EntryPoint="#6", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.Winapi)]
		public extern static void SysFreeString(global::System.IntPtr bstr);
	}

	public unsafe static partial class api_ms_win_core_winrt_robuffer_l1_1_0_dll_PInvokes
	{
		[global::McgInterop.McgGeneratedNativeCallCode]
		[global::System.Runtime.InteropServices.DllImport("api-ms-win-core-winrt-robuffer-l1-1-0.dll", CallingConvention=global::System.Runtime.InteropServices.CallingConvention.StdCall)]
		public extern static int RoGetBufferMarshaler(global::System.Runtime.InteropServices.IMarshal__System_Runtime_WindowsRuntime__Impl.Vtbl*** bufferMarshalerPtr);
	}
}

